















关于CORS
1，Angualr的跨域问题
proxy.conf.json 各个项目的意思
{
  "/api": {
    "target": "http://localhost:8080",
    "secure": false,
    "changeOrigin": true,
    "pathRewrite": {
      "^/api": ""
    }
  }
}

target: 代理的目标地址
secure: false, 如果是https协议，需要配置为false
changeOrigin: true, 如果是跨域，需要配置为true
pathRewrite: 重写路径，如果不需要重写，可以不配置

效果就是 /api 的请求都会被代理到 http://localhost:8080/api 
如果Angular运行在4200端口，则上面的配置导致的结果就是
所有 http://localhost:4200/api  的请求会被转发到 http://localhost:8080/api 上面

本质上讲，这只是Angular运行的WEB容器进行的一个反向代理设置，和Angular没有关系，
如果有对/Api/*的访问转发到 target设置的地址上去；通过这个特性，可以解决跨域问题

因为浏览器阻止JS访问其他域的资源，通过这个反代，就实现了跨域
对于本地开发而言，这样就能解决问题了，
但是在CodeSpace等环境而言，已经是网络环境了，中间涉及好几个跳转，只要一个跳转屏蔽了，所以直接明码写明地址，不使用这个！！

https://akechi1980-curly-tribble-pj9q6r7pjxrh6vx9-4200.preview.app.github.dev/apiv1/info/version


2,Springboot的CORS设定
在Springboot中，可以通过配置文件来设定CORS的相关参数，如下：
spring:
  mvc:
    cors:
      allowed-origins: "*"
      allowed-methods: "*"
      allowed-headers: "*"
      exposed-headers: "*"
      allow-credentials: true
      max-age: 1800
或者代码中设定：
@Configuration
public class CorsConfig {
    private CorsConfiguration buildConfig() {
        CorsConfiguration corsConfiguration = new CorsConfiguration();
        corsConfiguration.addAllowedOrigin("*");
        corsConfiguration.addAllowedHeader("*");
        corsConfiguration.addAllowedMethod("*");
        return corsConfiguration;
    }

    @Bean
    public CorsFilter corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", buildConfig());
        return new CorsFilter(source);
    }
}
这里的配置addAllowedOrigin是配置允许那些域名而来的请求
如果这里配置 * 则都许可；配置特定 域名 则只有这些域名发来的请求能够有效请求


需要的插件          
Extension Pack for Java
    Language Support for Java(TM) by Red Hat
    Debugger for Java
    Maven for Java 
    Project Manager for Java
    Test Runner for Java
    IntelliCode

Spring Boot Extension Pack
    Spring Initializr Java Support
    Spring Boot Dashboard
    Spring Boot Tools


环境变量	说明
CODESPACE_NAME	代码空间的名称 例如，octocat-literate-space-parakeet-mld5
CODESPACES	在代码空间中始终为 true
GIT_COMMITTER_EMAIL	未来 git 提交的“作者”字段的电子邮件。
GIT_COMMITTER_NAME	未来 git 提交的“提交者”字段的名称。
GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN	返回 GitHub Codespaces 转发端口的域。 例如 preview.app.github.dev。
GITHUB_API_URL	返回 API URL。 例如，https://api.github.com。
GITHUB_GRAPHQL_URL	返回 GraphQL API URL。 例如，https://api.github.com/graphql。
GITHUB_REPOSITORY	所有者和仓库名称。 例如，octocat/Hello-World。
GITHUB_SERVER_URL	返回 GitHub 服务器的 URL。 例如，https://github.com。
GITHUB_TOKEN	代表代码空间中用户的签名身份验证令牌。 您可以使用它对 GitHub API 进行经过身份验证的调用。 有关详细信息，请参阅“GitHub Codespaces 中的安全性”。
GITHUB_USER	启动代码空间的用户的名称。 例如，octocat。